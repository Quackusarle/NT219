"""
Django settings for auth_center_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from django.conf import settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fb8chf1v60m^*0+)s8+e-=8vmf+wmwg_#ent5fg6)r7ez+0c96'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'cpabe_service_app',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'corsheaders',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

SITE_ID = 1
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

AUTH_USER_MODEL = 'auth.User'
REST_USE_JWT = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:8001",
    "http://127.0.0.1:8001",
]

# Add CSRF settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:8001",
    "http://127.0.0.1:8001",
]
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_HTTPONLY = False  # Set to False to allow JavaScript to read the cookie
CSRF_USE_SESSIONS = False
CSRF_COOKIE_NAME = 'csrftoken'

# For API endpoints using JWT, we can exempt them from CSRF
# This is safer than disabling CSRF globally
CSRF_COOKIE_SECURE = False  # Set to True in production with HTTPS

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Sử dụng JWT làm phương thức xác thực chính cho API
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Cho phép truy cập API không cần authentication cho registration
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}


# Cấu hình dj_rest_auth để sử dụng JWT
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth',             # Tên cookie cho access token (nếu dùng cookie)
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token', # Tên cookie cho refresh token (nếu dùng cookie)
    'JWT_AUTH_HTTPONLY': False, # Set False để tokens cũng được trả về trong response body
    'JWT_AUTH_SECURE': False, # Set True khi deploy với HTTPS
    'JWT_AUTH_SAMESITE': 'Lax', # Cài đặt SameSite cho cookie (Lax hoặc Strict)
    'TOKEN_MODEL': None,
    'SESSION_LOGIN': False, # Disable session login for pure JWT
    'LOGIN_SERIALIZER': 'cpabe_service_app.serializers.CustomLoginSerializer',
}

try:
    with open(os.path.join(BASE_DIR, 'keys_jwt_ec', 'jwt_ec_private.pem'), 'rb') as f:
        JWT_EC_PRIVATE_KEY = f.read()
    with open(os.path.join(BASE_DIR, 'keys_jwt_ec', 'jwt_ec_public.pem'), 'rb') as f:
        JWT_EC_PUBLIC_KEY = f.read()
except FileNotFoundError:
    JWT_EC_PRIVATE_KEY = None
    JWT_EC_PUBLIC_KEY = None
    if not DEBUG:
        raise EnvironmentError("JWT EC Private/Public key files not found. Please generate them.")
    else:
        print("CẢNH BÁO: Không tìm thấy file private/public key ECC cho JWT. Sử dụng SECRET_KEY (HS256) cho development.")

# Cấu hình djangorestframework-simplejwt
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'ES256', # Thuật toán ký JWT
    'SIGNING_KEY': JWT_EC_PRIVATE_KEY, # Dùng private key ECC cho JWT
    'VERIFYING_KEY': JWT_EC_PUBLIC_KEY, # Dùng public key ECC cho JWT
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Chấp nhận "Bearer <token>"
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Không dùng nếu ROTATE_REFRESH_TOKENS=True
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Không dùng nếu ROTATE_REFRESH_TOKENS=True
    
    # Custom serializer để thêm attributes vào JWT
    'TOKEN_OBTAIN_SERIALIZER': 'cpabe_service_app.serializers.MyTokenObtainPairSerializer',
}

ROOT_URLCONF = 'auth_center_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Thư mục chứa các template
        'APP_DIRS': True,                                                                                       
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auth_center_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


CPABE_CONFIG = {
    'KEYS_DIR': os.path.join(BASE_DIR, 'keys_cpabe'),
    'PUBLIC_KEY_FILENAME': 'public_key.bin',
    'MASTER_KEY_FILENAME': 'master_key.bin',
    'TEMP_SK_FILENAME_PREFIX': 'temp_sk_',
    'SCHEME_NAME': 'Waters11',
    'PAIRING_GROUP': 'SS512',
    'WATERS11_UNI_SIZE': 100
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'cpabe_service_app': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Allauth configuration - required for dj-rest-auth
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_LOGIN_METHODS = {'username', 'email'}
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_USER_MODEL_EMAIL_FIELD = "email"
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_PASSWORD_MIN_LENGTH = 8